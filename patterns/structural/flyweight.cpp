#include <iostream>

using namespace std;

// Легковес — это структурный паттерн проектирования, который позволяет 
// вместить бóльшее количество объектов в отведённую оперативную память. 
// Легковес экономит память, разделяя общее состояние объектов между собой, 
// вместо хранения одинаковых данных в каждом объекте.

// Применимость:
//
// Когда не хватает оперативной памяти для поддержки всех нужных объектов.
//
// Эффективность паттерна Легковес во многом зависит от того, как и где он используется. 
// Применяйте этот паттерн, когда выполнены все перечисленные условия:
// - в приложении используется большое число объектов;
// - из-за этого высоки расходы оперативной памяти;
// - большую часть состояния объектов можно вынести за пределы их классов;
// - большие группы объектов можно заменить относительно небольшим количеством разделяемых 
//   объектов, поскольку внешнее состояние вынесено.


// Этот класс-легковес содержит часть полей, которые описывают
// деревья. Эти поля не уникальны для каждого дерева, в отличие,
// например, от координат: несколько деревьев могут иметь ту же
// текстуру.
//
// Поэтому мы переносим повторяющиеся данные в один-единственный
// объект и ссылаемся на него из множества отдельных деревьев.
class TreeType
{
public:
	TreeType(uint color, const std::string& texture): m_color(color), m_texture(texture) {}

private:
	uint m_color;
	std::string m_texture;	
};

// Фабрика легковесов решает, когда нужно создать новый
// легковес, а когда можно обойтись существующим.
class TreeTypesFactory
{
public:

	shared_ptr<TreeType> CreateTreeType(uint color, const std::string& texture)
	{
		std::string key = texture + std::to_string(color);

		auto it = m_typesCache.find(key);
		if(it != m_typesCache.end()){
			return it->second;
		}

		m_typesCache[key] = std::make_shared<TreeType>(color, texture);
		return m_typesCache.at(key);
	}

private:
	std::unordered_map<std::string, shared_ptr<TreeType>> m_typesCache;
};


void ClientCode()
{
	
}

int main()
{
	
	return 0;
}